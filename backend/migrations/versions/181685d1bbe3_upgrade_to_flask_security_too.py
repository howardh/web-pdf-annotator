"""Upgrade to flask-security-too

Revision ID: 181685d1bbe3
Revises: e77ac52b58bf
Create Date: 2021-01-27 15:29:15.738397

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '181685d1bbe3'
down_revision = 'e77ac52b58bf'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    #op.add_column('users', sa.Column('fs_uniquifier', sa.String(length=255), nullable=False))
    #op.create_unique_constraint(None, 'users', ['fs_uniquifier'])
    # ### end Alembic commands ###

    # Refer to the Flask-Security-Too changelogs for version 3.3.0 under section "DB Migration"
    # https://flask-security-too.readthedocs.io/en/stable/changelog.html
    # Code below was copy-pasted from there (with minor changes).

    # be sure to MODIFY this line to make nullable=True:
    op.add_column('users', sa.Column('fs_uniquifier', sa.String(length=255), nullable=True))
    op.create_unique_constraint(None, 'users', ['fs_uniquifier']) # The autogenerated code had this, but the docs don't. It looks like it should be needed though.

    # update existing rows with unique fs_uniquifier
    import uuid
    user_table = sa.Table('users', sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True),
                          sa.Column('fs_uniquifier', sa.String))
    conn = op.get_bind()
    for row in conn.execute(sa.select([user_table.c.id])):
        conn.execute(user_table.update().values(fs_uniquifier=uuid.uuid4().hex).where(user_table.c.id == row['id']))

    # finally - set nullable to false
    op.alter_column('users', 'fs_uniquifier', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'fs_uniquifier')
    # ### end Alembic commands ###
